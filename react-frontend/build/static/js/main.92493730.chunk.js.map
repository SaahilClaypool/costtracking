{"version":3,"sources":["GraphView.js","Util.js","InfoView.js","App.js","serviceWorker.js","index.js"],"names":["MARGIN","isCummulative","filterData","data","month","filter","d","parseInt","Date","split","updateGraph","d3Node","div","d3","xScale","domain","day","range","x","yScale","totalCost","Cost","y","minX","maxX","minY","maxY","rScale","r","colorScale","color","Who","content","current","select","points","selectAll","transition","call","console","log","length","exit","duration","attr","remove","enter","append","on","style","html","Description","pageX","pageY","cleanData","sort","a","b","forEach","i","GraphView","props","useRef","useEffect","HEIGHT","WIDTH","text","initGraph","className","id","ref","width","height","currentMonth","formatMoney","val","toFixed","shouldSpend","saahil","sarah","Message","name","spent","shouldSpent","owes","key","InfoView","costs","reduce","people","msgs","totalSpent","person","shouldHaveSpent","push","monthNames","App","React","useState","getMonth","setCurrentMonth","setData","isCum","setIsCum","setMonthRelative","offset","fetch","mode","headers","resp","json","body","JSON","parse","map","vals","year","fetchData","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gTAIMA,EAAiB,IAAjBA,EAA6B,GAA7BA,EAAsC,GAAtCA,EAAkD,IAIpDC,GAAgB,EAapB,SAASC,EAAWC,EAAMC,GACtB,OAAOD,EAAKE,QAAO,SAAAC,GAAC,OATbC,SAS4BD,EATbE,KAAKC,MAAM,KAAK,MASIL,EAAQ,KAGtD,SAASM,EAAYP,EAAMQ,GAGvB,IAAIC,EAAMC,IAAU,YAChBC,EAASD,MACRE,OAAOF,IAAUV,GAAM,SAAAG,GAAC,OAAIA,EAAEU,QAC9BC,MAAM,CAAC,EA1BF,MA2BNC,EAAI,SAAAZ,GAAC,OAAIQ,EAAOR,EAAEU,MAElBG,EAASN,MACRE,OAAOF,IAAUV,GAAM,SAAAG,GAAC,OAAKL,EAAgBK,EAAEc,UAAYd,EAAEe,SAC7DJ,MAAM,CA9BA,IA8BS,IAChBK,EAAI,SAAAhB,GAAC,OAAIa,EAAOlB,EAAgBK,EAAEc,UAAYd,EAAEe,OAZrB,EAcZR,IAAUV,GAAM,SAAAG,GAAC,OAAIA,EAAEU,OAdX,mBAc1BO,EAd0B,KAcpBC,EAdoB,OAgBZX,IAAUV,GAAM,SAAAG,GAAC,OAAIA,EAAEe,QAhBX,mBAgB1BI,EAhB0B,KAgBpBC,EAhBoB,KAmB3BC,EAASd,MACRE,OAAOF,IAAUV,GAAM,SAAAG,GAAC,OAAIA,EAAEe,SAC9BJ,MAAM,CAAC,EAAK,KACbW,EAAI,SAACtB,GAAD,OAAOqB,EAAOrB,EAAEe,OAEpBQ,EAAahB,IAAgBA,KAC7BiB,EAAQ,SAACxB,GAAD,OAAOuB,EAAWvB,EAAEyB,KAAO,MAGjCC,EADMnB,IAAUF,EAAOsB,SACTC,OAAO,KAOrBC,GANQH,EAAQI,UAAU,UAC3BC,WAAW,KACXC,KAAKzB,IAAcC,IACVkB,EAAQI,UAAU,UAC3BC,WAAW,KACXC,KAAKzB,IAAYM,IACPa,EAAQI,UAAU,UAAUjC,KAAKA,IAEhDoC,QAAQC,IAAR,kBAAuBrC,EAAKsC,OAA5B,YAEAN,EAAOO,OACFL,aACAM,SAAS,KACTC,KAAK,OAAQ,aACbC,SAELV,EAAOW,QACFC,OAAO,UACPH,KAAK,OAAQd,GACbc,KAAK,MAjCE,kBAAM9B,EAAOD,IAAiBU,EAAOC,EAAa,EAAPA,EAA9BX,OAkCpB+B,KAAK,MAhCE,kBAAMzB,EAAON,IAAiBY,EAAOC,EAAa,EAAPA,EAA9Bb,OAiCpB+B,KAAK,IAAK,GACVA,KAAK,OAAQ,WACbI,GAAG,aAAa,SAAC1C,GACdM,EAAIyB,aACCM,SAAS,KACTM,MAAM,UAAW,IACtBrC,EAAIsC,KAAJ,kCAEc5C,EAAEyB,IAFhB,8DAISzB,EAAE6C,YAJX,2BAOKF,MAAM,OAASpC,IAASuC,MAAQ,GAAM,MACtCH,MAAM,MAAQpC,IAASwC,MAAQ,GAAM,SAE7CL,GAAG,YAAY,SAAU1C,GACtBM,EAAIyB,aACCM,SAAS,KACTM,MAAM,UAAW,MAEzBZ,aACAM,SAAS,KACTC,KAAK,KAAM1B,GACX0B,KAAK,KAAMtB,GACXsB,KAAK,IAAKhB,GACVgB,KAAK,OAAQd,GAElBK,EAAOE,aACFM,SAAS,KACTC,KAAK,KAAM1B,GACX0B,KAAK,KAAMtB,GACXsB,KAAK,IAAKhB,GACVgB,KAAK,OAAQd,GA2DtB,SAASwB,EAAUnD,GACf,GAAIF,GAAiBE,EAAM,CACvBA,EAAKoD,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAExC,IAAMyC,EAAEzC,OAC9B,IAAII,EAAY,GAChBjB,EAAKuD,SAAQ,SAACpD,EAAGqD,GACPrD,EAAEyB,OAAOX,IACXA,EAAUd,EAAEyB,KAAO,GAEvBX,EAAUd,EAAEyB,MAAQzB,EAAEe,KACtBf,EAAEc,UAAYA,EAAUd,EAAEyB,KAC1B5B,EAAKwD,GAAKrD,KAGlB,OAAOH,EAsCIyD,MAnCf,SAAmBC,GAEf,IAAIlD,EAASmD,iBAAO,MAWpB,OATA7D,EAAgB4D,EAAM5D,cAEtB8D,qBAAU,YA9Ed,SAAmB5D,EAAMQ,GACrB,IAAIG,EAASD,MACRE,OAAOF,IAAUV,GAAM,SAAAG,GAAC,OAAIA,EAAEU,QAC9BC,MAAM,CAAC,EA7GF,MAgHNE,EAASN,MACRE,OAAOF,IAAUV,GAAM,SAAAG,GAAC,OAAIA,EAAEe,SAC9BJ,MAAM,CAAC,EAjHD,MAyHX,GAJUJ,IAAU,QAAQkC,OAAO,OAC9BH,KAAK,QAAS,WACdK,MAAM,UAAW,GAElB9C,GAAQQ,EAAOsB,QAAS,CACxB,IAEMD,EAFMnB,IAAUF,EAAOsB,SAGxBc,OAAO,KACPH,KAAK,YAFM,oBAEoB5C,EAFpB,aAEoCA,EAFpC,MAGDgC,EACVI,UAAU,UACVjC,KAAKA,GAEE6B,EACPe,OAAO,KACPH,KAAK,YAFE,sBAE0BoB,IAF1B,MAGPpB,KAAK,KAAM,SACXN,KAAKzB,IAAcC,IAExBkB,EAAQe,OAAO,QACVH,KAAK,IAAKqB,KACVrB,KAAK,IAAKoB,KACVf,MAAM,cAAe,UACrBiB,KAAK,gBAEElC,EACPe,OAAO,KACPH,KAAK,YAAa,oBAClBA,KAAK,KAAM,SACXN,KAAKzB,IAAYM,IAEtBa,EAAQe,OAAO,QACVH,KAAK,YAAa,eAClBA,KAAK,KAAM,IACXA,KAAK,KAAK,KACVA,KAAK,KAAM,OACXK,MAAM,cAAe,UACrBiB,KAAK,cAEVxD,EAAYP,EAAMQ,IA2BlBwD,CAAUb,EAAUpD,EAAW2D,EAAM1D,KAAM0D,EAAMzD,QAASO,KAC3D,IAEHoD,qBAAU,WACNrD,EAAY4C,EAAUpD,EAAW2D,EAAM1D,KAAM0D,EAAMzD,QAASO,MAEzD,yBAAKyD,UAAU,aAClB,yBAAKC,GAAG,UACJ,yBACIA,GAAG,QAAQC,IAAK3D,EAChB4D,MAnMF,IAmMiBvE,EAAcA,EAC7BwE,OAnMD,IAmMkBxE,EAAgBA,KAGzC,2BAAI6D,EAAMY,gBC5MX,SAASC,EAAYC,GACxB,MAAM,IAAN,OAAWA,EAAIC,QAAQ,ICgB3B,IAAMC,EAAc,CAChBC,OAAQ,GACRC,MAAO,IAGX,SAASC,EAAQC,EAAMC,EAAOC,EAAaC,GACvC,OACI,yBAAKhB,UAAU,UAAUiB,IAAKJ,GAC1B,gCAASA,GADb,cACuCP,EAAYQ,GADnD,IAEA,6BAEYE,EAAO,EACA,uCAAaV,EAAYU,IAEzB,gCAmCZE,MA7Bf,SAAkBzB,GACd,IAAI0B,EAAa1B,EAAM1D,KA/BNqF,QAAO,SAACC,EAAQnF,GAK7B,OAJKA,EAAEyB,OAAO0D,IACVA,EAAOnF,EAAEyB,KAAO,GAEpB0D,EAAOnF,EAAEyB,KAAOzB,EAAEe,KACXoE,IACR,IA0BCC,EAAO,GACPC,EAAa,EAEjB,IAAK,IAAMC,KAAUL,EAAO,CAExBI,GADYJ,EAAMK,GAItB,IAAK,IAAMA,KAAUL,EAAO,CACxB,IAAIL,EAAQK,EAAMK,GACdC,EAAkBF,GAAcC,KAAUf,EAAcA,EAAYe,GAAU,IAC9ER,EAAOS,EAAkBX,EAC7BQ,EAAKI,KAAKd,EAAQY,EAAQV,EAAOW,EAAiBT,IAGtD,OACI,yBAAKhB,UAAU,YACVsB,ICnDPK,EAAa,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAClE,OAAQ,SAAU,YAAa,UAAW,WAAY,YAyFzCC,MApFf,WAAgB,IAAD,EAE2BC,IAAMC,UAAS,IAAI1F,MAAO2F,YAFrD,mBAEN1B,EAFM,KAEQ2B,EAFR,OAGWH,IAAMC,SAAS,IAH1B,mBAGN/F,EAHM,KAGAkG,EAHA,OAIaJ,IAAMC,UAAS,GAJ5B,mBAINI,EAJM,KAICC,EAJD,KAQTC,EAAmB,SAAAC,GACrBL,GAAiB3B,EAAegC,EAAS,IAAM,KAoCjD,OA9BA1C,qBAAU,YACO,uCAAG,gCAAAP,EAAA,6DAChBjB,QAAQC,IAnBmE,IAkB3D,SAEGkE,MAAY,QAC7B,CACEC,KAAM,OACNC,QAAS,CACP,8BAA+B,OANrB,cAEVC,EAFU,gBAUCA,EAAKC,OAVN,OAUZC,EAVY,OAYZ5G,EAAO6G,KAAKC,MAAMF,GAAMG,KAAI,SAAA5G,GAC9B,IAAI6G,EAAO7G,EAAEE,KAAKC,MAAM,KACxB,OAAO,eACFH,EADL,CAEEF,MAAOG,SAAS4G,EAAK,IACrBnG,IAAKT,SAAS4G,EAAK,IACnBC,KAAM7G,SAAS4G,EAAK,SAIxB5E,QAAQC,IAAIrC,GAEZkG,EAAQlG,GAxBQ,4CAAH,qDA0BfkH,KACC,IAGD,yBAAKjD,UAAU,OACb,4CACA,4BAAK2B,EAAWtB,IAChB,yBAAKL,UAAU,YACb,4BACEA,UAAU,oBACVkD,QA9CgB,kBAAMf,GAAUD,KAgD/BA,EAAQ,cAAgB,oBAE3B,yBAAKlC,UAAU,WACb,yBAAKA,UAAU,UACb,wBAAIA,UAAU,eACZ,4BACE,4BAAQkD,QA/CP,kBAAMd,GAAkB,KA+CzB,WAIF,4BACE,2CAIF,4BACE,4BAAQc,QA1DP,kBAAMd,EAAiB,KA0DxB,YAKJ,kBAAC,EAAD,CAAWpG,MAAOqE,EAActE,KAAMA,EAAMF,cAAeqG,IAC3D,kBAAC,EAAD,CAAWnG,KAAMA,SC3EToH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhG,QAAQgG,MAAMA,EAAMC,c","file":"static/js/main.92493730.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\n\nconst MARGIN = { left: 200, right: 20, top: 40, bottom: 100 };\nconst WIDTH = 400;\nconst HEIGHT = 400;\n\nlet isCummulative = true;\n\n// https://medium.com/@jeffbutsch/using-d3-in-react-with-hooks-4a6c61f1d102\n\nfunction parseMonth(datum) {\n    return parseInt(datum.Date.split('/')[0])\n}\n\nfunction parseDay(datum) {\n    return parseInt(datum.Date.split('/')[1])\n}\n\n\nfunction filterData(data, month) {\n    return data.filter(d => parseMonth(d) === month + 1)\n}\n\nfunction updateGraph(data, d3Node) {\n    // TODO: Add total spending if cum\n\n    var div = d3.select(\".tooltip\");\n    let xScale = d3.scaleLinear()\n        .domain(d3.extent(data, d => d.day))\n        .range([0, WIDTH]);\n    let x = d => xScale(d.day)\n\n    let yScale = d3.scaleLinear()\n        .domain(d3.extent(data, d => (isCummulative ? d.totalCost : d.Cost)))\n        .range([HEIGHT, 0]);\n    let y = d => yScale(isCummulative ? d.totalCost : d.Cost)\n\n    let [minX, maxX] = d3.extent(data, d => d.day);\n    let randX = () => xScale(d3.randomUniform(minX - maxX, maxX * 2)())\n    let [minY, maxY] = d3.extent(data, d => d.Cost);\n    let randY = () => yScale(d3.randomUniform(minY - maxY, maxY * 2)())\n\n    let rScale = d3.scaleLinear()\n        .domain(d3.extent(data, d => d.Cost))\n        .range([4.0, 10])\n    let r = (d) => rScale(d.Cost);\n\n    let colorScale = d3.scaleOrdinal(d3.schemeAccent);\n    let color = (d) => colorScale(d.Who) + 'aa'; // opacity\n\n    const svg = d3.select(d3Node.current);\n    const content = svg.select('g');\n    const xAxis = content.selectAll('#xAxis')\n        .transition(500)\n        .call(d3.axisBottom(xScale));\n    const yAxis = content.selectAll('#yAxis')\n        .transition(500)\n        .call(d3.axisLeft(yScale));\n    const points = content.selectAll('circle').data(data);\n\n    console.log(`drawing ${data.length} points`)\n\n    points.exit()\n        .transition()\n        .duration(500)\n        .attr('fill', '#00000000')\n        .remove();\n\n    points.enter()\n        .append('circle')\n        .attr('fill', color)\n        .attr('cx', randX)\n        .attr('cy', randY)\n        .attr('r', 1)\n        .attr('fill', '#000000')\n        .on(\"mouseover\", (d) => {\n            div.transition()\n                .duration(200)\n                .style(\"opacity\", .9);\n            div.html((\n                `\\\n                <strong>${d.Who}</strong>\\\n                <hr/>\n                <p>${d.Description}</p>\n                `\n            ))\n                .style(\"left\", (d3.event.pageX + 10) + \"px\")\n                .style(\"top\", (d3.event.pageY - 65) + \"px\");\n        })\n        .on(\"mouseout\", function (d) {\n            div.transition()\n                .duration(500)\n                .style(\"opacity\", 0);\n        })\n        .transition()\n        .duration(500)\n        .attr('cx', x)\n        .attr('cy', y)\n        .attr('r', r)\n        .attr('fill', color);\n\n    points.transition()\n        .duration(500)\n        .attr('cx', x)\n        .attr('cy', y)\n        .attr('r', r)\n        .attr('fill', color);\n}\n\nfunction initGraph(data, d3Node) {\n    let xScale = d3.scaleLinear()\n        .domain(d3.extent(data, d => d.day))\n        .range([0, WIDTH]);\n    let x = d => xScale(d.day)\n\n    let yScale = d3.scaleLinear()\n        .domain(d3.extent(data, d => d.Cost))\n        .range([0, HEIGHT]);\n    let y = d => yScale(d.Cost)\n\n    // Define the div for the tooltip\n    var div = d3.select(\"body\").append(\"div\")\n        .attr(\"class\", \"tooltip\")\n        .style(\"opacity\", 0);\n\n    if (data && d3Node.current) {\n        const svg = d3.select(d3Node.current);\n\n        const content = svg\n            .append('g')\n            .attr('transform', `translate(${MARGIN.left}, ${MARGIN.top})`);\n        const points = content\n            .selectAll('circle')\n            .data(data);\n\n        let xAxis = content\n            .append('g')\n            .attr('transform', `translate(0,${HEIGHT + 10})`)\n            .attr('id', 'xAxis')\n            .call(d3.axisBottom(xScale));\n\n        content.append('text')\n            .attr('x', WIDTH / 2)\n            .attr('y', HEIGHT + 50)\n            .style(\"text-anchor\", \"middle\")\n            .text('Day of Month')\n\n        let yAxis = content\n            .append('g')\n            .attr(\"transform\", \"translate(-10,0)\")\n            .attr('id', 'yAxis')\n            .call(d3.axisLeft(yScale));\n\n        content.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", -80)\n            .attr(\"x\", 0 - (HEIGHT / 2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Cost (USD)\");\n\n        updateGraph(data, d3Node);\n    }\n}\n\nfunction cleanData(data) {\n    if (isCummulative && data) {\n        data.sort((a, b) => a.day > b.day)\n        let totalCost = {}\n        data.forEach((d, i) => {\n            if (!(d.Who in totalCost)) {\n                totalCost[d.Who] = 0\n            }\n            totalCost[d.Who] += d.Cost\n            d.totalCost = totalCost[d.Who]\n            data[i] = d\n        })\n    }\n    return data;\n}\n\nfunction GraphView(props) {\n\n    let d3Node = useRef(null);\n\n    isCummulative = props.isCummulative;\n\n    useEffect(() => {\n        initGraph(cleanData(filterData(props.data, props.month)), d3Node)\n    }, [])\n\n    useEffect(() => {\n        updateGraph(cleanData(filterData(props.data, props.month)), d3Node)\n    })\n    return <div className=\"GraphView\">\n        <div id=\"D3View\">\n            <svg\n                id=\"d3SVG\" ref={d3Node}\n                width={WIDTH + MARGIN.left + MARGIN.right}\n                height={HEIGHT + MARGIN.bottom + MARGIN.top}\n            />\n        </div>\n        <p>{props.currentMonth}</p>\n    </div >\n}\n\nGraphView.propTypes = {\n    month: PropTypes.number,\n    data: PropTypes.array,\n    isCummulative: PropTypes.bool\n};\n\n\n// D3 functions\n\n\nexport default GraphView;","export function formatMoney(val) {\n    return `$${val.toFixed(2)}`\n}\n\nexport default {formatMoney}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { formatMoney } from './Util';\n\n\n// TODO make more generic\nfunction owed(data) {\n    let costs = data.reduce((people, d) => {\n        if (!d.Who in people) {\n            people[d.Who] = 0.0;\n        }\n        people[d.Who] = d.Cost;\n        return people;\n    }, {});\n    return costs;\n}\n\nconst shouldSpend = {\n    saahil: .6,\n    sarah: .4\n}\n\nfunction Message(name, spent, shouldSpent, owes) {\n    return (\n        <div className=\"Message\" key={name}>\n            <strong>{name}</strong> has spent {formatMoney(spent)}.\n        <br />\n            {(() => {\n                if (owes > 0) {\n                    return <p>They owe {formatMoney(owes)}</p>\n                } else {\n                    return <span></span>\n                }\n            })()}\n        </div>)\n}\n\nfunction InfoView(props) {\n    let costs = owed(props.data);\n    let msgs = [];\n    let totalSpent = 0;\n\n    for (const person in costs) {\n        let spent = costs[person]\n        totalSpent += spent;\n    }\n\n    for (const person in costs) {\n        let spent = costs[person]\n        let shouldHaveSpent = totalSpent * (person in shouldSpend ? shouldSpend[person] : 0.5)\n        let owes = shouldHaveSpent - spent;\n        msgs.push(Message(person, spent, shouldHaveSpent, owes));\n    }\n\n    return (\n        <div className=\"InfoView\">\n            {msgs}\n        </div>\n    );\n}\n\n\nInfoView.propTypes = {\n    data: PropTypes.array,\n}\n\nexport default InfoView;","import React, { useEffect } from 'react';\nimport './App.css';\nimport GraphView from './GraphView';\nimport InfoView from './InfoView';\n\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\nconst URL =  (process.env.NODE_ENV === \"development\" ? \"http://127.0.0.1:5000\" : \"\")\n\nfunction App() {\n\n  const [currentMonth, setCurrentMonth] = React.useState(new Date().getMonth());\n  const [data, setData] = React.useState([]);\n  const [isCum, setIsCum] = React.useState(true);\n\n  let toggleCummulative = () => setIsCum(!isCum);\n\n  let setMonthRelative = offset => {\n    setCurrentMonth((currentMonth + offset + 12) % 12)\n  }\n\n  let incMonth = () => setMonthRelative(+1);\n  let decMonth = () => setMonthRelative(-1);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      console.log(URL);\n      const resp = await fetch(URL + \"/data\",\n        {\n          mode: \"cors\",\n          headers: {\n            \"Access-Control-Allow-Origin\": \"*\"\n          }\n        }\n      );\n      let body = await resp.json()\n\n      let data = JSON.parse(body).map(d => {\n        let vals = d.Date.split('/');\n        return {\n          ...d,\n          month: parseInt(vals[0]),\n          day: parseInt(vals[1]),\n          year: parseInt(vals[2]),\n        }\n      })\n\n      console.log(data)\n\n      setData(data);\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Cost Savings</h1>\n      <h2>{monthNames[currentMonth]}</h2>\n      <div className=\"Controls\">\n        <button \n          className=\"ToggleCummulative\"\n          onClick={toggleCummulative}\n          >\n          {isCum ? \"Cummulative\" : \"Single Purchases\"}\n        </button>\n        <div className=\"Content\">\n          <div className=\"Picker\">\n            <ul className=\"MonthPicker\">\n              <li>\n                <button onClick={decMonth}>\n                  &larr;\n              </button>\n              </li>\n              <li>\n                <button>\n                  &darr;\n              </button>\n              </li>\n              <li>\n                <button onClick={incMonth}>\n                  &rarr;\n              </button>\n              </li>\n            </ul>\n            <GraphView month={currentMonth} data={data} isCummulative={isCum}/>\n            <InfoView  data={data}/>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}